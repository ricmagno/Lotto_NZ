library {
  function {
    signature {
      name: "__inference_while_cond_14445_18581"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_14445___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_14445___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_14445___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_14445___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_fn_22981"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_lstm_layer_call_and_return_conditional_losses_22973"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_fn_22017"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_lstm_layer_call_and_return_conditional_losses_22009"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_16613_20873"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_while_body_17765_19972"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_21498"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_12198_20921"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_12197_21423"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_16134_24832"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_19093"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_16309_20380"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_layer_call_fn_22209"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_22202"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__wrapped_model_21543"
      input_arg {
        name: "lstm_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "sequential_lstm_statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_lstm_statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_lstm_statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_dense_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_dense_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_dense_1_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_dense_1_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "sequential/dense/BiasAdd/ReadVariableOp"
      control_output: "sequential/dense/MatMul/ReadVariableOp"
      control_output: "sequential/dense_1/BiasAdd/ReadVariableOp"
      control_output: "sequential/dense_1/MatMul/ReadVariableOp"
      control_output: "sequential/lstm/StatefulPartitionedCall"
    }
    node_def {
      name: "sequential/lstm/Shape"
      op: "Shape"
      input: "lstm_input"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/Shape"
      }
    }
    node_def {
      name: "sequential/lstm/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/strided_slice/stack"
      }
    }
    node_def {
      name: "sequential/lstm/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/strided_slice/stack_1"
      }
    }
    node_def {
      name: "sequential/lstm/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/strided_slice/stack_2"
      }
    }
    node_def {
      name: "sequential/lstm/strided_slice"
      op: "StridedSlice"
      input: "sequential/lstm/Shape:output:0"
      input: "sequential/lstm/strided_slice/stack:output:0"
      input: "sequential/lstm/strided_slice/stack_1:output:0"
      input: "sequential/lstm/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/strided_slice"
      }
    }
    node_def {
      name: "sequential/lstm/zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros/mul/y"
      }
    }
    node_def {
      name: "sequential/lstm/zeros/mul"
      op: "Mul"
      input: "sequential/lstm/strided_slice:output:0"
      input: "sequential/lstm/zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros/mul"
      }
    }
    node_def {
      name: "sequential/lstm/zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros/Less/y"
      }
    }
    node_def {
      name: "sequential/lstm/zeros/Less"
      op: "Less"
      input: "sequential/lstm/zeros/mul:z:0"
      input: "sequential/lstm/zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros/Less"
      }
    }
    node_def {
      name: "sequential/lstm/zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros/packed/1"
      }
    }
    node_def {
      name: "sequential/lstm/zeros/packed"
      op: "Pack"
      input: "sequential/lstm/strided_slice:output:0"
      input: "sequential/lstm/zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros/packed"
      }
    }
    node_def {
      name: "sequential/lstm/zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros/Const"
      }
    }
    node_def {
      name: "sequential/lstm/zeros"
      op: "Fill"
      input: "sequential/lstm/zeros/packed:output:0"
      input: "sequential/lstm/zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros"
      }
    }
    node_def {
      name: "sequential/lstm/zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros_1/mul/y"
      }
    }
    node_def {
      name: "sequential/lstm/zeros_1/mul"
      op: "Mul"
      input: "sequential/lstm/strided_slice:output:0"
      input: "sequential/lstm/zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros_1/mul"
      }
    }
    node_def {
      name: "sequential/lstm/zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros_1/Less/y"
      }
    }
    node_def {
      name: "sequential/lstm/zeros_1/Less"
      op: "Less"
      input: "sequential/lstm/zeros_1/mul:z:0"
      input: "sequential/lstm/zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros_1/Less"
      }
    }
    node_def {
      name: "sequential/lstm/zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros_1/packed/1"
      }
    }
    node_def {
      name: "sequential/lstm/zeros_1/packed"
      op: "Pack"
      input: "sequential/lstm/strided_slice:output:0"
      input: "sequential/lstm/zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros_1/packed"
      }
    }
    node_def {
      name: "sequential/lstm/zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros_1/Const"
      }
    }
    node_def {
      name: "sequential/lstm/zeros_1"
      op: "Fill"
      input: "sequential/lstm/zeros_1/packed:output:0"
      input: "sequential/lstm/zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/zeros_1"
      }
    }
    node_def {
      name: "sequential/lstm/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm_input"
      input: "sequential/lstm/zeros:output:0"
      input: "sequential/lstm/zeros_1:output:0"
      input: "sequential_lstm_statefulpartitionedcall_args_3"
      input: "sequential_lstm_statefulpartitionedcall_args_4"
      input: "sequential_lstm_statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_21498"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/lstm/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "sequential/dense/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_dense_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/dense/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential/dense/MatMul"
      op: "MatMul"
      input: "sequential/lstm/StatefulPartitionedCall:output:0"
      input: "sequential/dense/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/dense/MatMul"
      }
    }
    node_def {
      name: "sequential/dense/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_dense_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/dense/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential/dense/BiasAdd"
      op: "BiasAdd"
      input: "sequential/dense/MatMul:product:0"
      input: "sequential/dense/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/dense/BiasAdd"
      }
    }
    node_def {
      name: "sequential/dense_1/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_dense_1_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/dense_1/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential/dense_1/MatMul"
      op: "MatMul"
      input: "sequential/dense/BiasAdd:output:0"
      input: "sequential/dense_1/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/dense_1/MatMul"
      }
    }
    node_def {
      name: "sequential/dense_1/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_dense_1_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/dense_1/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential/dense_1/BiasAdd"
      op: "BiasAdd"
      input: "sequential/dense_1/MatMul:product:0"
      input: "sequential/dense_1/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential/dense_1/BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "sequential/dense_1/BiasAdd:output:0"
      input: "^sequential/dense/BiasAdd/ReadVariableOp"
      input: "^sequential/dense/MatMul/ReadVariableOp"
      input: "^sequential/dense_1/BiasAdd/ReadVariableOp"
      input: "^sequential/dense_1/MatMul/ReadVariableOp"
      input: "^sequential/lstm/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "sequential/dense/BiasAdd/ReadVariableOp"
      value: "sequential/dense/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential/dense/MatMul/ReadVariableOp"
      value: "sequential/dense/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "sequential/dense_1/BiasAdd/ReadVariableOp"
      value: "sequential/dense_1/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential/dense_1/MatMul/ReadVariableOp"
      value: "sequential/dense_1/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "sequential/lstm/StatefulPartitionedCall"
      value: "sequential/lstm/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "lstm_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_15941_22452"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_fn_23033"
      input_arg {
        name: "lstm_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm_input"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_layer_call_and_return_conditional_losses_23009"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "lstm_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_13911_22642"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_17690_23216"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_22940"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_14889_19549"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_14888_22865"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_13543_22690"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference_dense_1_layer_call_fn_21233"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_1_layer_call_and_return_conditional_losses_21226"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_15940_23887"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_15940___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_15940___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_15940___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_15940___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_22261"
      input_arg {
        name: "lstm_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/StatefulPartitionedCall"
      control_output: "dense_1/StatefulPartitionedCall"
      control_output: "lstm/StatefulPartitionedCall"
    }
    node_def {
      name: "lstm/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm_input"
      input: "lstm_statefulpartitionedcall_args_1"
      input: "lstm_statefulpartitionedcall_args_2"
      input: "lstm_statefulpartitionedcall_args_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_lstm_layer_call_and_return_conditional_losses_22009"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm/StatefulPartitionedCall:output:0"
      input: "dense_statefulpartitionedcall_args_1"
      input: "dense_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_22202"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense_1/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dense/StatefulPartitionedCall:output:0"
      input: "dense_1_statefulpartitionedcall_args_1"
      input: "dense_1_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_1_layer_call_and_return_conditional_losses_21226"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense_1/StatefulPartitionedCall:output:0"
      input: "^dense/StatefulPartitionedCall"
      input: "^dense_1/StatefulPartitionedCall"
      input: "^lstm/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "dense/StatefulPartitionedCall"
      value: "dense/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_1/StatefulPartitionedCall"
      value: "dense_1/StatefulPartitionedCall"
    }
    control_ret {
      key: "lstm/StatefulPartitionedCall"
      value: "lstm/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "lstm_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_17515_21730"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_20047"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_17765_19972"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_17764_18998"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_18942"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_13994_18867"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_13993_18771"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_23962"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_15941_22452"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_15940_23887"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_21976"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_14446_21901"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_14445_18581"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_23311"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_17231_19644"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_15082_20270"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_22223"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/StatefulPartitionedCall"
      control_output: "dense_1/StatefulPartitionedCall"
      control_output: "lstm/StatefulPartitionedCall"
    }
    node_def {
      name: "lstm/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "lstm_statefulpartitionedcall_args_1"
      input: "lstm_statefulpartitionedcall_args_2"
      input: "lstm_statefulpartitionedcall_args_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_lstm_layer_call_and_return_conditional_losses_22009"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm/StatefulPartitionedCall:output:0"
      input: "dense_statefulpartitionedcall_args_1"
      input: "dense_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_22202"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense_1/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dense/StatefulPartitionedCall:output:0"
      input: "dense_1_statefulpartitionedcall_args_1"
      input: "dense_1_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_1_layer_call_and_return_conditional_losses_21226"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense_1/StatefulPartitionedCall:output:0"
      input: "^dense/StatefulPartitionedCall"
      input: "^dense_1/StatefulPartitionedCall"
      input: "^lstm/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "dense/StatefulPartitionedCall"
      value: "dense/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_1/StatefulPartitionedCall"
      value: "dense_1/StatefulPartitionedCall"
    }
    control_ret {
      key: "lstm/StatefulPartitionedCall"
      value: "lstm/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_24007"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/BiasAdd/ReadVariableOp"
      control_output: "dense/MatMul/ReadVariableOp"
      control_output: "dense_1/BiasAdd/ReadVariableOp"
      control_output: "dense_1/MatMul/ReadVariableOp"
      control_output: "lstm/StatefulPartitionedCall"
    }
    node_def {
      name: "lstm/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/Shape"
      }
    }
    node_def {
      name: "lstm/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/strided_slice/stack"
      }
    }
    node_def {
      name: "lstm/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/strided_slice/stack_1"
      }
    }
    node_def {
      name: "lstm/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/strided_slice/stack_2"
      }
    }
    node_def {
      name: "lstm/strided_slice"
      op: "StridedSlice"
      input: "lstm/Shape:output:0"
      input: "lstm/strided_slice/stack:output:0"
      input: "lstm/strided_slice/stack_1:output:0"
      input: "lstm/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/strided_slice"
      }
    }
    node_def {
      name: "lstm/zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/mul/y"
      }
    }
    node_def {
      name: "lstm/zeros/mul"
      op: "Mul"
      input: "lstm/strided_slice:output:0"
      input: "lstm/zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/mul"
      }
    }
    node_def {
      name: "lstm/zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/Less/y"
      }
    }
    node_def {
      name: "lstm/zeros/Less"
      op: "Less"
      input: "lstm/zeros/mul:z:0"
      input: "lstm/zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/Less"
      }
    }
    node_def {
      name: "lstm/zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/packed/1"
      }
    }
    node_def {
      name: "lstm/zeros/packed"
      op: "Pack"
      input: "lstm/strided_slice:output:0"
      input: "lstm/zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/packed"
      }
    }
    node_def {
      name: "lstm/zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/Const"
      }
    }
    node_def {
      name: "lstm/zeros"
      op: "Fill"
      input: "lstm/zeros/packed:output:0"
      input: "lstm/zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros"
      }
    }
    node_def {
      name: "lstm/zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/mul/y"
      }
    }
    node_def {
      name: "lstm/zeros_1/mul"
      op: "Mul"
      input: "lstm/strided_slice:output:0"
      input: "lstm/zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/mul"
      }
    }
    node_def {
      name: "lstm/zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/Less/y"
      }
    }
    node_def {
      name: "lstm/zeros_1/Less"
      op: "Less"
      input: "lstm/zeros_1/mul:z:0"
      input: "lstm/zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/Less"
      }
    }
    node_def {
      name: "lstm/zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/packed/1"
      }
    }
    node_def {
      name: "lstm/zeros_1/packed"
      op: "Pack"
      input: "lstm/strided_slice:output:0"
      input: "lstm/zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/packed"
      }
    }
    node_def {
      name: "lstm/zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/Const"
      }
    }
    node_def {
      name: "lstm/zeros_1"
      op: "Fill"
      input: "lstm/zeros_1/packed:output:0"
      input: "lstm/zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1"
      }
    }
    node_def {
      name: "lstm/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "lstm/zeros:output:0"
      input: "lstm/zeros_1:output:0"
      input: "lstm_statefulpartitionedcall_args_3"
      input: "lstm_statefulpartitionedcall_args_4"
      input: "lstm_statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_23962"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense/MatMul"
      op: "MatMul"
      input: "lstm/StatefulPartitionedCall:output:0"
      input: "dense/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense/MatMul"
      }
    }
    node_def {
      name: "dense/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense/BiasAdd"
      op: "BiasAdd"
      input: "dense/MatMul:product:0"
      input: "dense/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense/BiasAdd"
      }
    }
    node_def {
      name: "dense_1/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_1_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_1/MatMul"
      op: "MatMul"
      input: "dense/BiasAdd:output:0"
      input: "dense_1/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/MatMul"
      }
    }
    node_def {
      name: "dense_1/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_1_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_1/BiasAdd"
      op: "BiasAdd"
      input: "dense_1/MatMul:product:0"
      input: "dense_1/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense_1/BiasAdd:output:0"
      input: "^dense/BiasAdd/ReadVariableOp"
      input: "^dense/MatMul/ReadVariableOp"
      input: "^dense_1/BiasAdd/ReadVariableOp"
      input: "^dense_1/MatMul/ReadVariableOp"
      input: "^lstm/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "dense/BiasAdd/ReadVariableOp"
      value: "dense/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense/MatMul/ReadVariableOp"
      value: "dense/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "dense_1/BiasAdd/ReadVariableOp"
      value: "dense_1/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_1/MatMul/ReadVariableOp"
      value: "dense_1/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "lstm/StatefulPartitionedCall"
      value: "lstm/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_and_return_conditional_losses_22798"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul/y"
      }
    }
    node_def {
      name: "zeros/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul"
      }
    }
    node_def {
      name: "zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less/y"
      }
    }
    node_def {
      name: "zeros/Less"
      op: "Less"
      input: "zeros/mul:z:0"
      input: "zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less"
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed/1"
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed"
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Const"
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros"
      }
    }
    node_def {
      name: "zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul/y"
      }
    }
    node_def {
      name: "zeros_1/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul"
      }
    }
    node_def {
      name: "zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less/y"
      }
    }
    node_def {
      name: "zeros_1/Less"
      op: "Less"
      input: "zeros_1/mul:z:0"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less"
      }
    }
    node_def {
      name: "zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed/1"
      }
    }
    node_def {
      name: "zeros_1/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed"
      }
    }
    node_def {
      name: "zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Const"
      }
    }
    node_def {
      name: "zeros_1"
      op: "Fill"
      input: "zeros_1/packed:output:0"
      input: "zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1"
      }
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "zeros:output:0"
      input: "zeros_1:output:0"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_22765"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_21016"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_and_return_conditional_losses_18975"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul/y"
      }
    }
    node_def {
      name: "zeros/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul"
      }
    }
    node_def {
      name: "zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less/y"
      }
    }
    node_def {
      name: "zeros/Less"
      op: "Less"
      input: "zeros/mul:z:0"
      input: "zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less"
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed/1"
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed"
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Const"
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros"
      }
    }
    node_def {
      name: "zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul/y"
      }
    }
    node_def {
      name: "zeros_1/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul"
      }
    }
    node_def {
      name: "zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less/y"
      }
    }
    node_def {
      name: "zeros_1/Less"
      op: "Less"
      input: "zeros_1/mul:z:0"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less"
      }
    }
    node_def {
      name: "zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed/1"
      }
    }
    node_def {
      name: "zeros_1/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed"
      }
    }
    node_def {
      name: "zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Const"
      }
    }
    node_def {
      name: "zeros_1"
      op: "Fill"
      input: "zeros_1/packed:output:0"
      input: "zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1"
      }
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "zeros:output:0"
      input: "zeros_1:output:0"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_18942"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_17322_18819"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_19373"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_17322_18819"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_17321_19298"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_18133_24562"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_23009"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/StatefulPartitionedCall"
      control_output: "dense_1/StatefulPartitionedCall"
      control_output: "lstm/StatefulPartitionedCall"
    }
    node_def {
      name: "lstm/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "lstm_statefulpartitionedcall_args_1"
      input: "lstm_statefulpartitionedcall_args_2"
      input: "lstm_statefulpartitionedcall_args_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_lstm_layer_call_and_return_conditional_losses_22973"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm/StatefulPartitionedCall:output:0"
      input: "dense_statefulpartitionedcall_args_1"
      input: "dense_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_22202"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense_1/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dense/StatefulPartitionedCall:output:0"
      input: "dense_1_statefulpartitionedcall_args_1"
      input: "dense_1_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_1_layer_call_and_return_conditional_losses_21226"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense_1/StatefulPartitionedCall:output:0"
      input: "^dense/StatefulPartitionedCall"
      input: "^dense_1/StatefulPartitionedCall"
      input: "^lstm/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "dense/StatefulPartitionedCall"
      value: "dense/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_1/StatefulPartitionedCall"
      value: "dense_1/StatefulPartitionedCall"
    }
    control_ret {
      key: "lstm/StatefulPartitionedCall"
      value: "lstm/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_16862_21745"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_16862___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_16862___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_16862___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_16862___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_15854_24292"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_15679_23609"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_fn_22235"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_layer_call_and_return_conditional_losses_22223"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_and_return_conditional_losses_22009"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul/y"
      }
    }
    node_def {
      name: "zeros/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul"
      }
    }
    node_def {
      name: "zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less/y"
      }
    }
    node_def {
      name: "zeros/Less"
      op: "Less"
      input: "zeros/mul:z:0"
      input: "zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less"
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed/1"
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed"
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Const"
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros"
      }
    }
    node_def {
      name: "zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul/y"
      }
    }
    node_def {
      name: "zeros_1/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul"
      }
    }
    node_def {
      name: "zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less/y"
      }
    }
    node_def {
      name: "zeros_1/Less"
      op: "Less"
      input: "zeros_1/mul:z:0"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less"
      }
    }
    node_def {
      name: "zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed/1"
      }
    }
    node_def {
      name: "zeros_1/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed"
      }
    }
    node_def {
      name: "zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Const"
      }
    }
    node_def {
      name: "zeros_1"
      op: "Fill"
      input: "zeros_1/packed:output:0"
      input: "zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1"
      }
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "zeros:output:0"
      input: "zeros_1:output:0"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_21976"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_23777"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/BiasAdd/ReadVariableOp"
      control_output: "dense/MatMul/ReadVariableOp"
      control_output: "dense_1/BiasAdd/ReadVariableOp"
      control_output: "dense_1/MatMul/ReadVariableOp"
      control_output: "lstm/StatefulPartitionedCall"
    }
    node_def {
      name: "lstm/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/Shape"
      }
    }
    node_def {
      name: "lstm/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/strided_slice/stack"
      }
    }
    node_def {
      name: "lstm/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/strided_slice/stack_1"
      }
    }
    node_def {
      name: "lstm/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/strided_slice/stack_2"
      }
    }
    node_def {
      name: "lstm/strided_slice"
      op: "StridedSlice"
      input: "lstm/Shape:output:0"
      input: "lstm/strided_slice/stack:output:0"
      input: "lstm/strided_slice/stack_1:output:0"
      input: "lstm/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/strided_slice"
      }
    }
    node_def {
      name: "lstm/zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/mul/y"
      }
    }
    node_def {
      name: "lstm/zeros/mul"
      op: "Mul"
      input: "lstm/strided_slice:output:0"
      input: "lstm/zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/mul"
      }
    }
    node_def {
      name: "lstm/zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/Less/y"
      }
    }
    node_def {
      name: "lstm/zeros/Less"
      op: "Less"
      input: "lstm/zeros/mul:z:0"
      input: "lstm/zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/Less"
      }
    }
    node_def {
      name: "lstm/zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/packed/1"
      }
    }
    node_def {
      name: "lstm/zeros/packed"
      op: "Pack"
      input: "lstm/strided_slice:output:0"
      input: "lstm/zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/packed"
      }
    }
    node_def {
      name: "lstm/zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros/Const"
      }
    }
    node_def {
      name: "lstm/zeros"
      op: "Fill"
      input: "lstm/zeros/packed:output:0"
      input: "lstm/zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros"
      }
    }
    node_def {
      name: "lstm/zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/mul/y"
      }
    }
    node_def {
      name: "lstm/zeros_1/mul"
      op: "Mul"
      input: "lstm/strided_slice:output:0"
      input: "lstm/zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/mul"
      }
    }
    node_def {
      name: "lstm/zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/Less/y"
      }
    }
    node_def {
      name: "lstm/zeros_1/Less"
      op: "Less"
      input: "lstm/zeros_1/mul:z:0"
      input: "lstm/zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/Less"
      }
    }
    node_def {
      name: "lstm/zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/packed/1"
      }
    }
    node_def {
      name: "lstm/zeros_1/packed"
      op: "Pack"
      input: "lstm/strided_slice:output:0"
      input: "lstm/zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/packed"
      }
    }
    node_def {
      name: "lstm/zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1/Const"
      }
    }
    node_def {
      name: "lstm/zeros_1"
      op: "Fill"
      input: "lstm/zeros_1/packed:output:0"
      input: "lstm/zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/zeros_1"
      }
    }
    node_def {
      name: "lstm/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "lstm/zeros:output:0"
      input: "lstm/zeros_1:output:0"
      input: "lstm_statefulpartitionedcall_args_3"
      input: "lstm_statefulpartitionedcall_args_4"
      input: "lstm_statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_23732"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense/MatMul"
      op: "MatMul"
      input: "lstm/StatefulPartitionedCall:output:0"
      input: "dense/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense/MatMul"
      }
    }
    node_def {
      name: "dense/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense/BiasAdd"
      op: "BiasAdd"
      input: "dense/MatMul:product:0"
      input: "dense/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense/BiasAdd"
      }
    }
    node_def {
      name: "dense_1/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_1_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_1/MatMul"
      op: "MatMul"
      input: "dense/BiasAdd:output:0"
      input: "dense_1/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/MatMul"
      }
    }
    node_def {
      name: "dense_1/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_1_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_1/BiasAdd"
      op: "BiasAdd"
      input: "dense_1/MatMul:product:0"
      input: "dense_1/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense_1/BiasAdd:output:0"
      input: "^dense/BiasAdd/ReadVariableOp"
      input: "^dense/MatMul/ReadVariableOp"
      input: "^dense_1/BiasAdd/ReadVariableOp"
      input: "^dense_1/MatMul/ReadVariableOp"
      input: "^lstm/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "dense/BiasAdd/ReadVariableOp"
      value: "dense/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense/MatMul/ReadVariableOp"
      value: "dense/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "dense_1/BiasAdd/ReadVariableOp"
      value: "dense_1/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_1/MatMul/ReadVariableOp"
      value: "dense_1/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "lstm/StatefulPartitionedCall"
      value: "lstm/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_and_return_conditional_losses_19406"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul/y"
      }
    }
    node_def {
      name: "zeros/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul"
      }
    }
    node_def {
      name: "zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less/y"
      }
    }
    node_def {
      name: "zeros/Less"
      op: "Less"
      input: "zeros/mul:z:0"
      input: "zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less"
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed/1"
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed"
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Const"
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros"
      }
    }
    node_def {
      name: "zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul/y"
      }
    }
    node_def {
      name: "zeros_1/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul"
      }
    }
    node_def {
      name: "zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less/y"
      }
    }
    node_def {
      name: "zeros_1/Less"
      op: "Less"
      input: "zeros_1/mul:z:0"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less"
      }
    }
    node_def {
      name: "zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed/1"
      }
    }
    node_def {
      name: "zeros_1/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed"
      }
    }
    node_def {
      name: "zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Const"
      }
    }
    node_def {
      name: "zeros_1"
      op: "Fill"
      input: "zeros_1/packed:output:0"
      input: "zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1"
      }
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "zeros:output:0"
      input: "zeros_1:output:0"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_19373"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_23732"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_15486_23657"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_15485_20285"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_15486_23657"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference_while_body_16420_22404"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_14814_22547"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_13736_24467"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_while_cond_17321_19298"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_17321___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_17321___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_17321___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_17321___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_24102"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_23872"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_14362_20475"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_1_layer_call_and_return_conditional_losses_21226"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_22765"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_13543_22690"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_13542_20095"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_layer_call_and_return_conditional_losses_22202"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_22995"
      input_arg {
        name: "lstm_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "lstm_statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_1_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/StatefulPartitionedCall"
      control_output: "dense_1/StatefulPartitionedCall"
      control_output: "lstm/StatefulPartitionedCall"
    }
    node_def {
      name: "lstm/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm_input"
      input: "lstm_statefulpartitionedcall_args_1"
      input: "lstm_statefulpartitionedcall_args_2"
      input: "lstm_statefulpartitionedcall_args_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_lstm_layer_call_and_return_conditional_losses_22973"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "lstm/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm/StatefulPartitionedCall:output:0"
      input: "dense_statefulpartitionedcall_args_1"
      input: "dense_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_22202"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense_1/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dense/StatefulPartitionedCall:output:0"
      input: "dense_1_statefulpartitionedcall_args_1"
      input: "dense_1_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_1_layer_call_and_return_conditional_losses_21226"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_1/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense_1/StatefulPartitionedCall:output:0"
      input: "^dense/StatefulPartitionedCall"
      input: "^dense_1/StatefulPartitionedCall"
      input: "^lstm/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "dense/StatefulPartitionedCall"
      value: "dense/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_1/StatefulPartitionedCall"
      value: "dense_1/StatefulPartitionedCall"
    }
    control_ret {
      key: "lstm/StatefulPartitionedCall"
      value: "lstm/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "lstm_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_14639_22192"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_21216"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_and_return_conditional_losses_23434"
      input_arg {
        name: "inputs_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul/y"
      }
    }
    node_def {
      name: "zeros/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul"
      }
    }
    node_def {
      name: "zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less/y"
      }
    }
    node_def {
      name: "zeros/Less"
      op: "Less"
      input: "zeros/mul:z:0"
      input: "zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less"
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed/1"
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed"
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Const"
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros"
      }
    }
    node_def {
      name: "zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul/y"
      }
    }
    node_def {
      name: "zeros_1/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul"
      }
    }
    node_def {
      name: "zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less/y"
      }
    }
    node_def {
      name: "zeros_1/Less"
      op: "Less"
      input: "zeros_1/mul:z:0"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less"
      }
    }
    node_def {
      name: "zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed/1"
      }
    }
    node_def {
      name: "zeros_1/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed"
      }
    }
    node_def {
      name: "zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Const"
      }
    }
    node_def {
      name: "zeros_1"
      op: "Fill"
      input: "zeros_1/packed:output:0"
      input: "zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1"
      }
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs_0"
      input: "zeros:output:0"
      input: "zeros_1:output:0"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_23401"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_fn_23021"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_layer_call_and_return_conditional_losses_23009"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_17764_18998"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_17764___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_17764___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_17764___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_17764___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_and_return_conditional_losses_21853"
      input_arg {
        name: "inputs_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul/y"
      }
    }
    node_def {
      name: "zeros/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul"
      }
    }
    node_def {
      name: "zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less/y"
      }
    }
    node_def {
      name: "zeros/Less"
      op: "Less"
      input: "zeros/mul:z:0"
      input: "zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less"
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed/1"
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed"
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Const"
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros"
      }
    }
    node_def {
      name: "zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul/y"
      }
    }
    node_def {
      name: "zeros_1/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul"
      }
    }
    node_def {
      name: "zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less/y"
      }
    }
    node_def {
      name: "zeros_1/Less"
      op: "Less"
      input: "zeros_1/mul:z:0"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less"
      }
    }
    node_def {
      name: "zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed/1"
      }
    }
    node_def {
      name: "zeros_1/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed"
      }
    }
    node_def {
      name: "zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Const"
      }
    }
    node_def {
      name: "zeros_1"
      op: "Fill"
      input: "zeros_1/packed:output:0"
      input: "zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1"
      }
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs_0"
      input: "zeros:output:0"
      input: "zeros_1:output:0"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_21820"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_19283"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_16419_23326"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_16419___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_16419___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_16419___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_16419___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_24657"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_14446_21901"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference_while_cond_13993_18771"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_13993___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_13993___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_13993___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_13993___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference_while_body_14889_19549"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_and_return_conditional_losses_20080"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul/y"
      }
    }
    node_def {
      name: "zeros/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul"
      }
    }
    node_def {
      name: "zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less/y"
      }
    }
    node_def {
      name: "zeros/Less"
      op: "Less"
      input: "zeros/mul:z:0"
      input: "zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less"
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed/1"
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed"
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Const"
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros"
      }
    }
    node_def {
      name: "zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul/y"
      }
    }
    node_def {
      name: "zeros_1/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul"
      }
    }
    node_def {
      name: "zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less/y"
      }
    }
    node_def {
      name: "zeros_1/Less"
      op: "Less"
      input: "zeros_1/mul:z:0"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less"
      }
    }
    node_def {
      name: "zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed/1"
      }
    }
    node_def {
      name: "zeros_1/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed"
      }
    }
    node_def {
      name: "zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Const"
      }
    }
    node_def {
      name: "zeros_1"
      op: "Fill"
      input: "zeros_1/packed:output:0"
      input: "zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1"
      }
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "zeros:output:0"
      input: "zeros_1:output:0"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_20047"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__traced_restore_23121"
      input_arg {
        name: "file_prefix"
        type: DT_STRING
      }
      input_arg {
        name: "assignvariableop_dense_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_1_dense_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_2_dense_1_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_3_dense_1_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_4_adam_iter"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_5_adam_beta_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_6_adam_beta_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_7_adam_decay"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_8_adam_learning_rate"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_9_lstm_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_10_lstm_recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_11_lstm_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_12_adam_dense_kernel_m"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_13_adam_dense_bias_m"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_14_adam_dense_1_kernel_m"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_15_adam_dense_1_bias_m"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_16_adam_lstm_kernel_m"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_17_adam_lstm_recurrent_kernel_m"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_18_adam_lstm_bias_m"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_19_adam_dense_kernel_v"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_20_adam_dense_bias_v"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_21_adam_dense_1_kernel_v"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_22_adam_dense_1_bias_v"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_23_adam_lstm_kernel_v"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_24_adam_lstm_recurrent_kernel_v"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_25_adam_lstm_bias_v"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity_27"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "AssignVariableOp"
      control_output: "AssignVariableOp_1"
      control_output: "AssignVariableOp_10"
      control_output: "AssignVariableOp_11"
      control_output: "AssignVariableOp_12"
      control_output: "AssignVariableOp_13"
      control_output: "AssignVariableOp_14"
      control_output: "AssignVariableOp_15"
      control_output: "AssignVariableOp_16"
      control_output: "AssignVariableOp_17"
      control_output: "AssignVariableOp_18"
      control_output: "AssignVariableOp_19"
      control_output: "AssignVariableOp_2"
      control_output: "AssignVariableOp_20"
      control_output: "AssignVariableOp_21"
      control_output: "AssignVariableOp_22"
      control_output: "AssignVariableOp_23"
      control_output: "AssignVariableOp_24"
      control_output: "AssignVariableOp_25"
      control_output: "AssignVariableOp_3"
      control_output: "AssignVariableOp_4"
      control_output: "AssignVariableOp_5"
      control_output: "AssignVariableOp_6"
      control_output: "AssignVariableOp_7"
      control_output: "AssignVariableOp_8"
      control_output: "AssignVariableOp_9"
      control_output: "RestoreV2"
      control_output: "RestoreV2_1"
    }
    node_def {
      name: "RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "layer_with_weights-1/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/beta_1/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/beta_2/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/decay/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/learning_rate/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2/tensor_names"
      }
    }
    node_def {
      name: "RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2/shape_and_slices"
      }
    }
    node_def {
      name: "RestoreV2"
      op: "RestoreV2"
      input: "file_prefix"
      input: "RestoreV2/tensor_names:output:0"
      input: "RestoreV2/shape_and_slices:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RestoreV2:tensors:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "assignvariableop_dense_kernel"
      input: "Identity:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "RestoreV2:tensors:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "assignvariableop_1_dense_bias"
      input: "Identity_1:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "RestoreV2:tensors:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "assignvariableop_2_dense_1_kernel"
      input: "Identity_2:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "RestoreV2:tensors:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "assignvariableop_3_dense_1_bias"
      input: "Identity_3:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "RestoreV2:tensors:4"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "assignvariableop_4_adam_iter"
      input: "Identity_4:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "RestoreV2:tensors:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    node_def {
      name: "AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "assignvariableop_5_adam_beta_1"
      input: "Identity_5:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_5"
      }
    }
    node_def {
      name: "Identity_6"
      op: "Identity"
      input: "RestoreV2:tensors:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_6"
      }
    }
    node_def {
      name: "AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "assignvariableop_6_adam_beta_2"
      input: "Identity_6:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_6"
      }
    }
    node_def {
      name: "Identity_7"
      op: "Identity"
      input: "RestoreV2:tensors:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_7"
      }
    }
    node_def {
      name: "AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "assignvariableop_7_adam_decay"
      input: "Identity_7:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_7"
      }
    }
    node_def {
      name: "Identity_8"
      op: "Identity"
      input: "RestoreV2:tensors:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_8"
      }
    }
    node_def {
      name: "AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "assignvariableop_8_adam_learning_rate"
      input: "Identity_8:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_8"
      }
    }
    node_def {
      name: "Identity_9"
      op: "Identity"
      input: "RestoreV2:tensors:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_9"
      }
    }
    node_def {
      name: "AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "assignvariableop_9_lstm_kernel"
      input: "Identity_9:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_9"
      }
    }
    node_def {
      name: "Identity_10"
      op: "Identity"
      input: "RestoreV2:tensors:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_10"
      }
    }
    node_def {
      name: "AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "assignvariableop_10_lstm_recurrent_kernel"
      input: "Identity_10:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_10"
      }
    }
    node_def {
      name: "Identity_11"
      op: "Identity"
      input: "RestoreV2:tensors:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_11"
      }
    }
    node_def {
      name: "AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "assignvariableop_11_lstm_bias"
      input: "Identity_11:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_11"
      }
    }
    node_def {
      name: "Identity_12"
      op: "Identity"
      input: "RestoreV2:tensors:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_12"
      }
    }
    node_def {
      name: "AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "assignvariableop_12_adam_dense_kernel_m"
      input: "Identity_12:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_12"
      }
    }
    node_def {
      name: "Identity_13"
      op: "Identity"
      input: "RestoreV2:tensors:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_13"
      }
    }
    node_def {
      name: "AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "assignvariableop_13_adam_dense_bias_m"
      input: "Identity_13:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_13"
      }
    }
    node_def {
      name: "Identity_14"
      op: "Identity"
      input: "RestoreV2:tensors:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_14"
      }
    }
    node_def {
      name: "AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "assignvariableop_14_adam_dense_1_kernel_m"
      input: "Identity_14:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_14"
      }
    }
    node_def {
      name: "Identity_15"
      op: "Identity"
      input: "RestoreV2:tensors:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_15"
      }
    }
    node_def {
      name: "AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "assignvariableop_15_adam_dense_1_bias_m"
      input: "Identity_15:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_15"
      }
    }
    node_def {
      name: "Identity_16"
      op: "Identity"
      input: "RestoreV2:tensors:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_16"
      }
    }
    node_def {
      name: "AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "assignvariableop_16_adam_lstm_kernel_m"
      input: "Identity_16:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_16"
      }
    }
    node_def {
      name: "Identity_17"
      op: "Identity"
      input: "RestoreV2:tensors:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_17"
      }
    }
    node_def {
      name: "AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "assignvariableop_17_adam_lstm_recurrent_kernel_m"
      input: "Identity_17:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_17"
      }
    }
    node_def {
      name: "Identity_18"
      op: "Identity"
      input: "RestoreV2:tensors:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_18"
      }
    }
    node_def {
      name: "AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "assignvariableop_18_adam_lstm_bias_m"
      input: "Identity_18:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_18"
      }
    }
    node_def {
      name: "Identity_19"
      op: "Identity"
      input: "RestoreV2:tensors:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_19"
      }
    }
    node_def {
      name: "AssignVariableOp_19"
      op: "AssignVariableOp"
      input: "assignvariableop_19_adam_dense_kernel_v"
      input: "Identity_19:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_19"
      }
    }
    node_def {
      name: "Identity_20"
      op: "Identity"
      input: "RestoreV2:tensors:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_20"
      }
    }
    node_def {
      name: "AssignVariableOp_20"
      op: "AssignVariableOp"
      input: "assignvariableop_20_adam_dense_bias_v"
      input: "Identity_20:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_20"
      }
    }
    node_def {
      name: "Identity_21"
      op: "Identity"
      input: "RestoreV2:tensors:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_21"
      }
    }
    node_def {
      name: "AssignVariableOp_21"
      op: "AssignVariableOp"
      input: "assignvariableop_21_adam_dense_1_kernel_v"
      input: "Identity_21:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_21"
      }
    }
    node_def {
      name: "Identity_22"
      op: "Identity"
      input: "RestoreV2:tensors:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_22"
      }
    }
    node_def {
      name: "AssignVariableOp_22"
      op: "AssignVariableOp"
      input: "assignvariableop_22_adam_dense_1_bias_v"
      input: "Identity_22:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_22"
      }
    }
    node_def {
      name: "Identity_23"
      op: "Identity"
      input: "RestoreV2:tensors:23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_23"
      }
    }
    node_def {
      name: "AssignVariableOp_23"
      op: "AssignVariableOp"
      input: "assignvariableop_23_adam_lstm_kernel_v"
      input: "Identity_23:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_23"
      }
    }
    node_def {
      name: "Identity_24"
      op: "Identity"
      input: "RestoreV2:tensors:24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_24"
      }
    }
    node_def {
      name: "AssignVariableOp_24"
      op: "AssignVariableOp"
      input: "assignvariableop_24_adam_lstm_recurrent_kernel_v"
      input: "Identity_24:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_24"
      }
    }
    node_def {
      name: "Identity_25"
      op: "Identity"
      input: "RestoreV2:tensors:25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_25"
      }
    }
    node_def {
      name: "AssignVariableOp_25"
      op: "AssignVariableOp"
      input: "assignvariableop_25_adam_lstm_bias_v"
      input: "Identity_25:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_25"
      }
    }
    node_def {
      name: "RestoreV2_1/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2_1/tensor_names"
      }
    }
    node_def {
      name: "RestoreV2_1/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2_1/shape_and_slices"
      }
    }
    node_def {
      name: "RestoreV2_1"
      op: "RestoreV2"
      input: "file_prefix"
      input: "RestoreV2_1/tensor_names:output:0"
      input: "RestoreV2_1/shape_and_slices:output:0"
      input: "^RestoreV2"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2_1"
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      device: "/device:CPU:0"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity_26"
      op: "Identity"
      input: "file_prefix"
      input: "^AssignVariableOp"
      input: "^AssignVariableOp_1"
      input: "^AssignVariableOp_10"
      input: "^AssignVariableOp_11"
      input: "^AssignVariableOp_12"
      input: "^AssignVariableOp_13"
      input: "^AssignVariableOp_14"
      input: "^AssignVariableOp_15"
      input: "^AssignVariableOp_16"
      input: "^AssignVariableOp_17"
      input: "^AssignVariableOp_18"
      input: "^AssignVariableOp_19"
      input: "^AssignVariableOp_2"
      input: "^AssignVariableOp_20"
      input: "^AssignVariableOp_21"
      input: "^AssignVariableOp_22"
      input: "^AssignVariableOp_23"
      input: "^AssignVariableOp_24"
      input: "^AssignVariableOp_25"
      input: "^AssignVariableOp_3"
      input: "^AssignVariableOp_4"
      input: "^AssignVariableOp_5"
      input: "^AssignVariableOp_6"
      input: "^AssignVariableOp_7"
      input: "^AssignVariableOp_8"
      input: "^AssignVariableOp_9"
      input: "^NoOp"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_26"
      }
    }
    node_def {
      name: "Identity_27"
      op: "Identity"
      input: "Identity_26:output:0"
      input: "^AssignVariableOp"
      input: "^AssignVariableOp_1"
      input: "^AssignVariableOp_10"
      input: "^AssignVariableOp_11"
      input: "^AssignVariableOp_12"
      input: "^AssignVariableOp_13"
      input: "^AssignVariableOp_14"
      input: "^AssignVariableOp_15"
      input: "^AssignVariableOp_16"
      input: "^AssignVariableOp_17"
      input: "^AssignVariableOp_18"
      input: "^AssignVariableOp_19"
      input: "^AssignVariableOp_2"
      input: "^AssignVariableOp_20"
      input: "^AssignVariableOp_21"
      input: "^AssignVariableOp_22"
      input: "^AssignVariableOp_23"
      input: "^AssignVariableOp_24"
      input: "^AssignVariableOp_25"
      input: "^AssignVariableOp_3"
      input: "^AssignVariableOp_4"
      input: "^AssignVariableOp_5"
      input: "^AssignVariableOp_6"
      input: "^AssignVariableOp_7"
      input: "^AssignVariableOp_8"
      input: "^AssignVariableOp_9"
      input: "^RestoreV2"
      input: "^RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_27"
      }
    }
    ret {
      key: "identity_27"
      value: "Identity_27:output:0"
    }
    control_ret {
      key: "AssignVariableOp"
      value: "AssignVariableOp"
    }
    control_ret {
      key: "AssignVariableOp_1"
      value: "AssignVariableOp_1"
    }
    control_ret {
      key: "AssignVariableOp_10"
      value: "AssignVariableOp_10"
    }
    control_ret {
      key: "AssignVariableOp_11"
      value: "AssignVariableOp_11"
    }
    control_ret {
      key: "AssignVariableOp_12"
      value: "AssignVariableOp_12"
    }
    control_ret {
      key: "AssignVariableOp_13"
      value: "AssignVariableOp_13"
    }
    control_ret {
      key: "AssignVariableOp_14"
      value: "AssignVariableOp_14"
    }
    control_ret {
      key: "AssignVariableOp_15"
      value: "AssignVariableOp_15"
    }
    control_ret {
      key: "AssignVariableOp_16"
      value: "AssignVariableOp_16"
    }
    control_ret {
      key: "AssignVariableOp_17"
      value: "AssignVariableOp_17"
    }
    control_ret {
      key: "AssignVariableOp_18"
      value: "AssignVariableOp_18"
    }
    control_ret {
      key: "AssignVariableOp_19"
      value: "AssignVariableOp_19"
    }
    control_ret {
      key: "AssignVariableOp_2"
      value: "AssignVariableOp_2"
    }
    control_ret {
      key: "AssignVariableOp_20"
      value: "AssignVariableOp_20"
    }
    control_ret {
      key: "AssignVariableOp_21"
      value: "AssignVariableOp_21"
    }
    control_ret {
      key: "AssignVariableOp_22"
      value: "AssignVariableOp_22"
    }
    control_ret {
      key: "AssignVariableOp_23"
      value: "AssignVariableOp_23"
    }
    control_ret {
      key: "AssignVariableOp_24"
      value: "AssignVariableOp_24"
    }
    control_ret {
      key: "AssignVariableOp_25"
      value: "AssignVariableOp_25"
    }
    control_ret {
      key: "AssignVariableOp_3"
      value: "AssignVariableOp_3"
    }
    control_ret {
      key: "AssignVariableOp_4"
      value: "AssignVariableOp_4"
    }
    control_ret {
      key: "AssignVariableOp_5"
      value: "AssignVariableOp_5"
    }
    control_ret {
      key: "AssignVariableOp_6"
      value: "AssignVariableOp_6"
    }
    control_ret {
      key: "AssignVariableOp_7"
      value: "AssignVariableOp_7"
    }
    control_ret {
      key: "AssignVariableOp_8"
      value: "AssignVariableOp_8"
    }
    control_ret {
      key: "AssignVariableOp_9"
      value: "AssignVariableOp_9"
    }
    control_ret {
      key: "RestoreV2"
      value: "RestoreV2"
    }
    control_ret {
      key: "RestoreV2_1"
      value: "RestoreV2_1"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "file_prefix"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_15485_20285"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_15485___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_15485___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_15485___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_15485___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_16788_19739"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_14187_21408"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_fn_22247"
      input_arg {
        name: "lstm_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm_input"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_layer_call_and_return_conditional_losses_22223"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "lstm_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_12197_21423"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_12197___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_12197___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_12197___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_12197___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_15257_19188"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___forward_cudnn_lstm_with_fallback_12566_19501"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice_stack"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_1"
        type: DT_INT32
      }
      output_arg {
        name: "strided_slice_stack_2"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_9_perm"
        type: DT_INT32
      }
      output_arg {
        name: "cudnnrnn_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "cudnnrnn_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims"
        type: DT_FLOAT
      }
      output_arg {
        name: "expanddims_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "transpose_perm"
        type: DT_INT32
      }
      output_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      output_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      output_arg {
        name: "concat_1_axis"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_1_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_2_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_3_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_4_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_5_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_6_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_7_perm"
        type: DT_INT32
      }
      output_arg {
        name: "transpose_8_perm"
        type: DT_INT32
      }
      output_arg {
        name: "split_2_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "split_1_split_dim"
        type: DT_INT32
      }
      output_arg {
        name: "concat_axis"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose_0"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h_0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c_0"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose_0:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
    ret {
      key: "concat_1_axis"
      value: "concat_1/axis:output:0"
    }
    ret {
      key: "concat_axis"
      value: "concat/axis:output:0"
    }
    ret {
      key: "cudnnrnn"
      value: "CudnnRNN:output:0"
    }
    ret {
      key: "cudnnrnn_0"
      value: "CudnnRNN:output_h:0"
    }
    ret {
      key: "cudnnrnn_1"
      value: "CudnnRNN:output_c:0"
    }
    ret {
      key: "cudnnrnn_2"
      value: "CudnnRNN:reserve_space:0"
    }
    ret {
      key: "expanddims"
      value: "ExpandDims:output:0"
    }
    ret {
      key: "expanddims_1"
      value: "ExpandDims_1:output:0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "init_c"
      value: "init_c_0"
    }
    ret {
      key: "init_h"
      value: "init_h_0"
    }
    ret {
      key: "split_1_split_dim"
      value: "split_1/split_dim:output:0"
    }
    ret {
      key: "split_2_split_dim"
      value: "split_2/split_dim:output:0"
    }
    ret {
      key: "split_split_dim"
      value: "split/split_dim:output:0"
    }
    ret {
      key: "strided_slice_stack"
      value: "strided_slice/stack:output:0"
    }
    ret {
      key: "strided_slice_stack_1"
      value: "strided_slice/stack_1:output:0"
    }
    ret {
      key: "strided_slice_stack_2"
      value: "strided_slice/stack_2:output:0"
    }
    ret {
      key: "transpose"
      value: "transpose_0:y:0"
    }
    ret {
      key: "transpose_1_perm"
      value: "transpose_1/perm:output:0"
    }
    ret {
      key: "transpose_2_perm"
      value: "transpose_2/perm:output:0"
    }
    ret {
      key: "transpose_3_perm"
      value: "transpose_3/perm:output:0"
    }
    ret {
      key: "transpose_4_perm"
      value: "transpose_4/perm:output:0"
    }
    ret {
      key: "transpose_5_perm"
      value: "transpose_5/perm:output:0"
    }
    ret {
      key: "transpose_6_perm"
      value: "transpose_6/perm:output:0"
    }
    ret {
      key: "transpose_7_perm"
      value: "transpose_7/perm:output:0"
    }
    ret {
      key: "transpose_8_perm"
      value: "transpose_8/perm:output:0"
    }
    ret {
      key: "transpose_9_perm"
      value: "transpose_9/perm:output:0"
    }
    ret {
      key: "transpose_perm"
      value: "transpose/perm:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__traced_save_22850"
      input_arg {
        name: "file_prefix"
        type: DT_STRING
      }
      input_arg {
        name: "savev2_dense_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_1_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_1_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_iter_read_readvariableop"
        type: DT_INT64
      }
      input_arg {
        name: "savev2_adam_beta_1_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_beta_2_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_decay_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_learning_rate_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_lstm_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_lstm_recurrent_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_lstm_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_dense_kernel_m_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_dense_bias_m_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_dense_1_kernel_m_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_dense_1_bias_m_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_lstm_kernel_m_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_lstm_recurrent_kernel_m_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_lstm_bias_m_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_dense_kernel_v_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_dense_bias_v_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_dense_1_kernel_v_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_dense_1_bias_v_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_lstm_kernel_v_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_lstm_recurrent_kernel_v_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_adam_lstm_bias_v_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_1_const"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "MergeV2Checkpoints"
      control_output: "SaveV2"
      control_output: "SaveV2_1"
    }
    node_def {
      name: "StringJoin/inputs_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_9a23d8a1922c4632a0607bab43e83756/part"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StringJoin/inputs_1"
      }
    }
    node_def {
      name: "StringJoin"
      op: "StringJoin"
      input: "file_prefix"
      input: "StringJoin/inputs_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
      experimental_debug_info {
        original_node_names: "StringJoin"
      }
    }
    node_def {
      name: "num_shards"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "num_shards"
      }
    }
    node_def {
      name: "ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ShardedFilename/shard"
      }
    }
    node_def {
      name: "ShardedFilename"
      op: "ShardedFilename"
      input: "StringJoin:output:0"
      input: "ShardedFilename/shard:output:0"
      input: "num_shards:output:0"
      device: "/device:CPU:0"
      experimental_debug_info {
        original_node_names: "ShardedFilename"
      }
    }
    node_def {
      name: "SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "layer_with_weights-1/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/beta_1/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/beta_2/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/decay/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/learning_rate/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.OPTIMIZER_SLOT/optimizer/m/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.OPTIMIZER_SLOT/optimizer/v/.ATTRIBUTES/VARIABLE_VALUE"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2/tensor_names"
      }
    }
    node_def {
      name: "SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2/shape_and_slices"
      }
    }
    node_def {
      name: "SaveV2"
      op: "SaveV2"
      input: "ShardedFilename:filename:0"
      input: "SaveV2/tensor_names:output:0"
      input: "SaveV2/shape_and_slices:output:0"
      input: "savev2_dense_kernel_read_readvariableop"
      input: "savev2_dense_bias_read_readvariableop"
      input: "savev2_dense_1_kernel_read_readvariableop"
      input: "savev2_dense_1_bias_read_readvariableop"
      input: "savev2_adam_iter_read_readvariableop"
      input: "savev2_adam_beta_1_read_readvariableop"
      input: "savev2_adam_beta_2_read_readvariableop"
      input: "savev2_adam_decay_read_readvariableop"
      input: "savev2_adam_learning_rate_read_readvariableop"
      input: "savev2_lstm_kernel_read_readvariableop"
      input: "savev2_lstm_recurrent_kernel_read_readvariableop"
      input: "savev2_lstm_bias_read_readvariableop"
      input: "savev2_adam_dense_kernel_m_read_readvariableop"
      input: "savev2_adam_dense_bias_m_read_readvariableop"
      input: "savev2_adam_dense_1_kernel_m_read_readvariableop"
      input: "savev2_adam_dense_1_bias_m_read_readvariableop"
      input: "savev2_adam_lstm_kernel_m_read_readvariableop"
      input: "savev2_adam_lstm_recurrent_kernel_m_read_readvariableop"
      input: "savev2_adam_lstm_bias_m_read_readvariableop"
      input: "savev2_adam_dense_kernel_v_read_readvariableop"
      input: "savev2_adam_dense_bias_v_read_readvariableop"
      input: "savev2_adam_dense_1_kernel_v_read_readvariableop"
      input: "savev2_adam_dense_1_bias_v_read_readvariableop"
      input: "savev2_adam_lstm_kernel_v_read_readvariableop"
      input: "savev2_adam_lstm_recurrent_kernel_v_read_readvariableop"
      input: "savev2_adam_lstm_bias_v_read_readvariableop"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2"
      }
    }
    node_def {
      name: "ShardedFilename_1/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ShardedFilename_1/shard"
      }
    }
    node_def {
      name: "ShardedFilename_1"
      op: "ShardedFilename"
      input: "StringJoin:output:0"
      input: "ShardedFilename_1/shard:output:0"
      input: "num_shards:output:0"
      device: "/device:CPU:0"
      experimental_debug_info {
        original_node_names: "ShardedFilename_1"
      }
    }
    node_def {
      name: "SaveV2_1/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2_1/tensor_names"
      }
    }
    node_def {
      name: "SaveV2_1/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2_1/shape_and_slices"
      }
    }
    node_def {
      name: "SaveV2_1"
      op: "SaveV2"
      input: "ShardedFilename_1:filename:0"
      input: "SaveV2_1/tensor_names:output:0"
      input: "SaveV2_1/shape_and_slices:output:0"
      input: "savev2_1_const"
      input: "^SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2_1"
      }
    }
    node_def {
      name: "MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "ShardedFilename:filename:0"
      input: "ShardedFilename_1:filename:0"
      input: "^SaveV2"
      input: "^SaveV2_1"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "MergeV2Checkpoints/checkpoint_prefixes"
      }
    }
    node_def {
      name: "MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "MergeV2Checkpoints/checkpoint_prefixes:output:0"
      input: "file_prefix"
      input: "^SaveV2_1"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "MergeV2Checkpoints"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "file_prefix"
      input: "^MergeV2Checkpoints"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^MergeV2Checkpoints"
      input: "^SaveV2"
      input: "^SaveV2_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    control_ret {
      key: "MergeV2Checkpoints"
      value: "MergeV2Checkpoints"
    }
    control_ret {
      key: "SaveV2"
      value: "SaveV2"
    }
    control_ret {
      key: "SaveV2_1"
      value: "SaveV2_1"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "file_prefix"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_layer_call_and_return_conditional_losses_19749"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_21820"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_16863_20698"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_16862_21745"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_standard_lstm_23401"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
      control_output: "while"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayUnstack/TensorListFromTensor"
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack"
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_1"
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1/stack_2"
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_1"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "strided_slice_1:output:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "init_h"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2_1"
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "time"
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/maximum_iterations"
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "while/loop_counter"
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "init_h"
      input: "init_c"
      input: "strided_slice:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "kernel"
      input: "recurrent_kernel"
      input: "bias"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 11
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_16420_22404"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_16419_23326"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
      experimental_debug_info {
        original_node_names: "while"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Stack/TensorListStack"
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack"
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_1"
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2/stack_2"
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice_2"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_1:y:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "while:output:4"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "while:output:5"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      input: "^while"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_1_layer_call_and_return_conditional_losses_21026"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_13542_20095"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_13542___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_13542___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_13542___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_13542___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_12391_18756"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_22356"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_fn_22806"
      input_arg {
        name: "inputs_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs_0"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_lstm_layer_call_and_return_conditional_losses_22798"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_12198_20921"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_17958_20650"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_while_cond_14888_22865"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "while_cond_14888___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_cond_14888___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_14888___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_cond_14888___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_24197"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_fn_18983"
      input_arg {
        name: "inputs_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs_0"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_lstm_layer_call_and_return_conditional_losses_18975"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_signature_wrapper_21555"
      input_arg {
        name: "lstm_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "lstm_input"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__wrapped_model_21543"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "lstm_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_13994_18867"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference_while_body_16863_20698"
      input_arg {
        name: "while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "matmul_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "matmul_1_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_INT32
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "matmul_1_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
      control_output: "MatMul_1/ReadVariableOp"
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_1_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul_1"
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "MatMul:product:0"
      input: "MatMul_1:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "add:z:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "split:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Sigmoid_1"
      op: "Sigmoid"
      input: "split:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_1"
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Sigmoid_1:y:0"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    node_def {
      name: "Tanh"
      op: "Tanh"
      input: "split:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh"
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Sigmoid:y:0"
      input: "Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_1"
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "mul:z:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "Sigmoid_2"
      op: "Sigmoid"
      input: "split:output:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid_2"
      }
    }
    node_def {
      name: "Tanh_1"
      op: "Tanh"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Tanh_1"
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "Sigmoid_2:y:0"
      input: "Tanh_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul_2"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add_2/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_2/y"
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "placeholder"
      input: "add_2/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_2"
      }
    }
    node_def {
      name: "add_3/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_3/y"
      }
    }
    node_def {
      name: "add_3"
      op: "AddV2"
      input: "while_loop_counter"
      input: "add_3/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_3"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_3:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "while_maximum_iterations"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "add_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "mul_2:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "add_1:z:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      input: "^MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "biasadd_readvariableop_resource"
      value: "biasadd_readvariableop_resource_0"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "matmul_1_readvariableop_resource"
      value: "matmul_1_readvariableop_resource_0"
    }
    ret {
      key: "matmul_readvariableop_resource"
      value: "matmul_readvariableop_resource_0"
    }
    ret {
      key: "strided_slice"
      value: "strided_slice_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    control_ret {
      key: "MatMul_1/ReadVariableOp"
      value: "MatMul_1/ReadVariableOp"
    }
  }
  function {
    signature {
      name: "__inference_cudnn_lstm_with_fallback_21121"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "CudnnRNN"
      control_output: "concat/ReadVariableOp"
      control_output: "split/ReadVariableOp"
      control_output: "split_1/ReadVariableOp"
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose/perm"
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose"
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims/dim"
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "init_h"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims"
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1/dim"
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "init_c"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "ExpandDims_1"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split/split_dim"
      }
    }
    node_def {
      name: "split/ReadVariableOp"
      op: "ReadVariableOp"
      input: "kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split/ReadVariableOp"
      }
    }
    node_def {
      name: "split"
      op: "Split"
      input: "split/split_dim:output:0"
      input: "split/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/split_dim"
      }
    }
    node_def {
      name: "split_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "recurrent_kernel"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "split_1/ReadVariableOp"
      }
    }
    node_def {
      name: "split_1"
      op: "Split"
      input: "split_1/split_dim:output:0"
      input: "split_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "split_1"
      }
    }
    node_def {
      name: "zeros_like"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 120
              }
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_like"
      }
    }
    node_def {
      name: "concat/ReadVariableOp"
      op: "ReadVariableOp"
      input: "bias"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "concat/ReadVariableOp"
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat/axis"
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "zeros_like:output:0"
      input: "concat/ReadVariableOp:value:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat"
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_2"
      }
    }
    node_def {
      name: "split_2/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "split_2/split_dim"
      }
    }
    node_def {
      name: "split_2"
      op: "Split"
      input: "split_2/split_dim:output:0"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 8
        }
      }
      experimental_debug_info {
        original_node_names: "split_2"
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_3"
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1/perm"
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "split:output:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_1"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "transpose_1:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "transpose_2/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2/perm"
      }
    }
    node_def {
      name: "transpose_2"
      op: "Transpose"
      input: "split:output:1"
      input: "transpose_2/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_2"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "transpose_2:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "transpose_3/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3/perm"
      }
    }
    node_def {
      name: "transpose_3"
      op: "Transpose"
      input: "split:output:2"
      input: "transpose_3/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_3"
      }
    }
    node_def {
      name: "Reshape_2"
      op: "Reshape"
      input: "transpose_3:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_2"
      }
    }
    node_def {
      name: "transpose_4/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4/perm"
      }
    }
    node_def {
      name: "transpose_4"
      op: "Transpose"
      input: "split:output:3"
      input: "transpose_4/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_4"
      }
    }
    node_def {
      name: "Reshape_3"
      op: "Reshape"
      input: "transpose_4:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_3"
      }
    }
    node_def {
      name: "transpose_5/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5/perm"
      }
    }
    node_def {
      name: "transpose_5"
      op: "Transpose"
      input: "split_1:output:0"
      input: "transpose_5/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_5"
      }
    }
    node_def {
      name: "Reshape_4"
      op: "Reshape"
      input: "transpose_5:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_4"
      }
    }
    node_def {
      name: "transpose_6/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6/perm"
      }
    }
    node_def {
      name: "transpose_6"
      op: "Transpose"
      input: "split_1:output:1"
      input: "transpose_6/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_6"
      }
    }
    node_def {
      name: "Reshape_5"
      op: "Reshape"
      input: "transpose_6:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_5"
      }
    }
    node_def {
      name: "transpose_7/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7/perm"
      }
    }
    node_def {
      name: "transpose_7"
      op: "Transpose"
      input: "split_1:output:2"
      input: "transpose_7/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_7"
      }
    }
    node_def {
      name: "Reshape_6"
      op: "Reshape"
      input: "transpose_7:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_6"
      }
    }
    node_def {
      name: "transpose_8/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8/perm"
      }
    }
    node_def {
      name: "transpose_8"
      op: "Transpose"
      input: "split_1:output:3"
      input: "transpose_8/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_8"
      }
    }
    node_def {
      name: "Reshape_7"
      op: "Reshape"
      input: "transpose_8:y:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_7"
      }
    }
    node_def {
      name: "Reshape_8"
      op: "Reshape"
      input: "split_2:output:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_8"
      }
    }
    node_def {
      name: "Reshape_9"
      op: "Reshape"
      input: "split_2:output:1"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_9"
      }
    }
    node_def {
      name: "Reshape_10"
      op: "Reshape"
      input: "split_2:output:2"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_10"
      }
    }
    node_def {
      name: "Reshape_11"
      op: "Reshape"
      input: "split_2:output:3"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_11"
      }
    }
    node_def {
      name: "Reshape_12"
      op: "Reshape"
      input: "split_2:output:4"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_12"
      }
    }
    node_def {
      name: "Reshape_13"
      op: "Reshape"
      input: "split_2:output:5"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_13"
      }
    }
    node_def {
      name: "Reshape_14"
      op: "Reshape"
      input: "split_2:output:6"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_14"
      }
    }
    node_def {
      name: "Reshape_15"
      op: "Reshape"
      input: "split_2:output:7"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_15"
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1/axis"
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "Reshape:output:0"
      input: "Reshape_1:output:0"
      input: "Reshape_2:output:0"
      input: "Reshape_3:output:0"
      input: "Reshape_4:output:0"
      input: "Reshape_5:output:0"
      input: "Reshape_6:output:0"
      input: "Reshape_7:output:0"
      input: "Reshape_8:output:0"
      input: "Reshape_9:output:0"
      input: "Reshape_10:output:0"
      input: "Reshape_11:output:0"
      input: "Reshape_12:output:0"
      input: "Reshape_13:output:0"
      input: "Reshape_14:output:0"
      input: "Reshape_15:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "concat_1"
      }
    }
    node_def {
      name: "CudnnRNN"
      op: "CudnnRNN"
      input: "transpose:y:0"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "CudnnRNN"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "CudnnRNN:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "transpose_9/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9/perm"
      }
    }
    node_def {
      name: "transpose_9"
      op: "Transpose"
      input: "CudnnRNN:output:0"
      input: "transpose_9/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "transpose_9"
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "CudnnRNN:output_h:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze"
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "CudnnRNN:output_c:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Squeeze_1"
      }
    }
    node_def {
      name: "runtime"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "runtime"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "transpose_9:y:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "Squeeze:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "Squeeze_1:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "runtime:output:0"
      input: "^CudnnRNN"
      input: "^concat/ReadVariableOp"
      input: "^split/ReadVariableOp"
      input: "^split_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    control_ret {
      key: "CudnnRNN"
      value: "CudnnRNN"
    }
    control_ret {
      key: "concat/ReadVariableOp"
      value: "concat/ReadVariableOp"
    }
    control_ret {
      key: "split/ReadVariableOp"
      value: "split/ReadVariableOp"
    }
    control_ret {
      key: "split_1/ReadVariableOp"
      value: "split_1/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_h"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "init_c"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "kernel"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "recurrent_kernel"
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "bias"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference___backward_cudnn_lstm_with_fallback_17056_19924"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_squeeze_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_squeeze_1_grad_shape_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_zeros_like_cudnnrnn"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_transpose_grad_invertpermutation_transpose_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_expanddims_grad_shape_init_h"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_expanddims_1_grad_shape_init_c"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_concat_1_grad_mod_concat_1_axis"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_2_grad_concat_split_2_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_grad_concat_split_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_split_1_grad_concat_split_1_split_dim"
        type: DT_INT32
      }
      input_arg {
        name: "gradients_concat_grad_mod_concat_axis"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
    node_def {
      name: "gradients/grad_ys_0"
      op: "Identity"
      input: "placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_0"
      }
    }
    node_def {
      name: "gradients/grad_ys_1"
      op: "Identity"
      input: "placeholder_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_1"
      }
    }
    node_def {
      name: "gradients/grad_ys_2"
      op: "Identity"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_2"
      }
    }
    node_def {
      name: "gradients/grad_ys_3"
      op: "Identity"
      input: "placeholder_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_3"
      }
    }
    node_def {
      name: "gradients/grad_ys_4"
      op: "Identity"
      input: "placeholder_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/grad_ys_4"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/Shape"
      op: "Shape"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/Shape"
      }
    }
    node_def {
      name: "gradients/strided_slice_grad/StridedSliceGrad"
      op: "StridedSliceGrad"
      input: "gradients/strided_slice_grad/Shape:output:0"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_1"
      input: "gradients_strided_slice_grad_stridedslicegrad_strided_slice_stack_2"
      input: "gradients/grad_ys_0:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/strided_slice_grad/StridedSliceGrad"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_9_grad_invertpermutation_transpose_9_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_9_grad/transpose"
      op: "Transpose"
      input: "gradients/grad_ys_1:output:0"
      input: "gradients/transpose_9_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_9_grad/transpose"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_2:output:0"
      input: "gradients/Squeeze_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Shape"
      op: "Shape"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Squeeze_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/grad_ys_3:output:0"
      input: "gradients/Squeeze_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Squeeze_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/strided_slice_grad/StridedSliceGrad:output:0"
      input: "gradients/transpose_9_grad/transpose:y:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/strided_slice_grad/StridedSliceGrad"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/AddN"
      }
    }
    node_def {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/zeros_like"
      }
    }
    node_def {
      name: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      op: "CudnnRNNBackprop"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_transpose"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_expanddims_1"
      input: "gradients_cudnnrnn_grad_cudnnrnnbackprop_concat_1"
      input: "gradients_strided_slice_grad_shape_cudnnrnn"
      input: "gradients_squeeze_grad_shape_cudnnrnn"
      input: "gradients_squeeze_1_grad_shape_cudnnrnn"
      input: "gradients/AddN:sum:0"
      input: "gradients/Squeeze_grad/Reshape:output:0"
      input: "gradients/Squeeze_1_grad/Reshape:output:0"
      input: "gradients_zeros_like_cudnnrnn"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "direction"
        value {
          s: "unidirectional"
        }
      }
      attr {
        key: "dropout"
        value {
          f: 0.0
        }
      }
      attr {
        key: "input_mode"
        value {
          s: "linear_input"
        }
      }
      attr {
        key: "rnn_mode"
        value {
          s: "lstm"
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      }
    }
    node_def {
      name: "gradients/transpose_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_grad_invertpermutation_transpose_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_grad/transpose"
      op: "Transpose"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_backprop:0"
      input: "gradients/transpose_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_grad/transpose"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_grad_shape_init_h"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_h_backprop:0"
      input: "gradients/ExpandDims_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Shape"
      op: "Shape"
      input: "gradients_expanddims_1_grad_shape_init_c"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/ExpandDims_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:input_c_backprop:0"
      input: "gradients/ExpandDims_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/ExpandDims_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_1_grad_mod_concat_1_axis"
      input: "gradients/concat_1_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_6"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 900
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_8"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_9"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_10"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_11"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_12"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_13"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_14"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Shape_15"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Shape_15"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_1_grad/mod:z:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:0"
      input: "gradients/concat_1_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_1"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:1"
      input: "gradients/concat_1_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_1"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_2"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:2"
      input: "gradients/concat_1_grad/Shape_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_2"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_3"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:3"
      input: "gradients/concat_1_grad/Shape_3:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_3"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_4"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:4"
      input: "gradients/concat_1_grad/Shape_4:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_4"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_5"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:5"
      input: "gradients/concat_1_grad/Shape_5:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_5"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_6"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:6"
      input: "gradients/concat_1_grad/Shape_6:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_6"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_7"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:7"
      input: "gradients/concat_1_grad/Shape_7:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_7"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_8"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:8"
      input: "gradients/concat_1_grad/Shape_8:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_8"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_9"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:9"
      input: "gradients/concat_1_grad/Shape_9:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_9"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_10"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:10"
      input: "gradients/concat_1_grad/Shape_10:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_10"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_11"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:11"
      input: "gradients/concat_1_grad/Shape_11:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_11"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_12"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:12"
      input: "gradients/concat_1_grad/Shape_12:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_12"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_13"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:13"
      input: "gradients/concat_1_grad/Shape_13:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_13"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_14"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:14"
      input: "gradients/concat_1_grad/Shape_14:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_14"
      }
    }
    node_def {
      name: "gradients/concat_1_grad/Slice_15"
      op: "Slice"
      input: "gradients/CudnnRNN_grad/CudnnRNNBackprop:params_backprop:0"
      input: "gradients/concat_1_grad/ConcatOffset:offset:15"
      input: "gradients/concat_1_grad/Shape_15:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_1_grad/Slice_15"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice:output:0"
      input: "gradients/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_1:output:0"
      input: "gradients/Reshape_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_1_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_2:output:0"
      input: "gradients/Reshape_2_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_2_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_3:output:0"
      input: "gradients/Reshape_3_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_3_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_4_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_4:output:0"
      input: "gradients/Reshape_4_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_4_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_5_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_5:output:0"
      input: "gradients/Reshape_5_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_5_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_6_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_6:output:0"
      input: "gradients/Reshape_6_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_6_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\000\000\000\036\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_7_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_7:output:0"
      input: "gradients/Reshape_7_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_7_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_8_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_8:output:0"
      input: "gradients/Reshape_8_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_8_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_9_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_9:output:0"
      input: "gradients/Reshape_9_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_9_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_10_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_10:output:0"
      input: "gradients/Reshape_10_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_10_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_11_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_11:output:0"
      input: "gradients/Reshape_11_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_11_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_12_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_12:output:0"
      input: "gradients/Reshape_12_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_12_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_13_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_13:output:0"
      input: "gradients/Reshape_13_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_13_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_14_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_14:output:0"
      input: "gradients/Reshape_14_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_14_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Shape"
      }
    }
    node_def {
      name: "gradients/Reshape_15_grad/Reshape"
      op: "Reshape"
      input: "gradients/concat_1_grad/Slice_15:output:0"
      input: "gradients/Reshape_15_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/Reshape_15_grad/Reshape"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_1_grad_invertpermutation_transpose_1_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_1_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_grad/Reshape:output:0"
      input: "gradients/transpose_1_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_1_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_2_grad_invertpermutation_transpose_2_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_2_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_1_grad/Reshape:output:0"
      input: "gradients/transpose_2_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_2_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_3_grad_invertpermutation_transpose_3_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_3_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_2_grad/Reshape:output:0"
      input: "gradients/transpose_3_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_3_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_4_grad_invertpermutation_transpose_4_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_4_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_3_grad/Reshape:output:0"
      input: "gradients/transpose_4_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_4_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_5_grad_invertpermutation_transpose_5_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_5_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_4_grad/Reshape:output:0"
      input: "gradients/transpose_5_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_5_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_6_grad_invertpermutation_transpose_6_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_6_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_5_grad/Reshape:output:0"
      input: "gradients/transpose_6_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_6_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_7_grad_invertpermutation_transpose_7_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_7_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_6_grad/Reshape:output:0"
      input: "gradients/transpose_7_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_7_grad/transpose"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/InvertPermutation"
      op: "InvertPermutation"
      input: "gradients_transpose_8_grad_invertpermutation_transpose_8_perm"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/InvertPermutation"
      }
    }
    node_def {
      name: "gradients/transpose_8_grad/transpose"
      op: "Transpose"
      input: "gradients/Reshape_7_grad/Reshape:output:0"
      input: "gradients/transpose_8_grad/InvertPermutation:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/transpose_8_grad/transpose"
      }
    }
    node_def {
      name: "gradients/split_2_grad/concat"
      op: "ConcatV2"
      input: "gradients/Reshape_8_grad/Reshape:output:0"
      input: "gradients/Reshape_9_grad/Reshape:output:0"
      input: "gradients/Reshape_10_grad/Reshape:output:0"
      input: "gradients/Reshape_11_grad/Reshape:output:0"
      input: "gradients/Reshape_12_grad/Reshape:output:0"
      input: "gradients/Reshape_13_grad/Reshape:output:0"
      input: "gradients/Reshape_14_grad/Reshape:output:0"
      input: "gradients/Reshape_15_grad/Reshape:output:0"
      input: "gradients_split_2_grad_concat_split_2_split_dim"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_2_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_1_grad/transpose:y:0"
      input: "gradients/transpose_2_grad/transpose:y:0"
      input: "gradients/transpose_3_grad/transpose:y:0"
      input: "gradients/transpose_4_grad/transpose:y:0"
      input: "gradients_split_grad_concat_split_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_grad/concat"
      }
    }
    node_def {
      name: "gradients/split_1_grad/concat"
      op: "ConcatV2"
      input: "gradients/transpose_5_grad/transpose:y:0"
      input: "gradients/transpose_6_grad/transpose:y:0"
      input: "gradients/transpose_7_grad/transpose:y:0"
      input: "gradients/transpose_8_grad/transpose:y:0"
      input: "gradients_split_1_grad_concat_split_1_split_dim"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/split_1_grad/concat"
      }
    }
    node_def {
      name: "gradients/concat_grad/Rank"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Rank"
      }
    }
    node_def {
      name: "gradients/concat_grad/mod"
      op: "FloorMod"
      input: "gradients_concat_grad_mod_concat_axis"
      input: "gradients/concat_grad/Rank:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/mod"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape"
      }
    }
    node_def {
      name: "gradients/concat_grad/Shape_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 120
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Shape_1"
      }
    }
    node_def {
      name: "gradients/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/concat_grad/mod:z:0"
      input: "gradients/concat_grad/Shape:output:0"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/ConcatOffset"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:0"
      input: "gradients/concat_grad/Shape:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice"
      }
    }
    node_def {
      name: "gradients/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/split_2_grad/concat:output:0"
      input: "gradients/concat_grad/ConcatOffset:offset:1"
      input: "gradients/concat_grad/Shape_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gradients/concat_grad/Slice_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "gradients/transpose_grad/transpose:y:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "gradients/ExpandDims_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "gradients/ExpandDims_1_grad/Reshape:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "gradients/split_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "gradients/split_1_grad/concat:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "gradients/concat_grad/Slice_1:output:0"
      input: "^gradients/CudnnRNN_grad/CudnnRNNBackprop"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    control_ret {
      key: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
      value: "gradients/CudnnRNN_grad/CudnnRNNBackprop"
    }
  }
  function {
    signature {
      name: "__inference_lstm_layer_call_and_return_conditional_losses_22973"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Shape"
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack"
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_1"
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice/stack_2"
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "strided_slice"
      }
    }
    node_def {
      name: "zeros/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul/y"
      }
    }
    node_def {
      name: "zeros/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/mul"
      }
    }
    node_def {
      name: "zeros/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less/y"
      }
    }
    node_def {
      name: "zeros/Less"
      op: "Less"
      input: "zeros/mul:z:0"
      input: "zeros/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Less"
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed/1"
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/packed"
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros/Const"
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros"
      }
    }
    node_def {
      name: "zeros_1/mul/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul/y"
      }
    }
    node_def {
      name: "zeros_1/mul"
      op: "Mul"
      input: "strided_slice:output:0"
      input: "zeros_1/mul/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/mul"
      }
    }
    node_def {
      name: "zeros_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less/y"
      }
    }
    node_def {
      name: "zeros_1/Less"
      op: "Less"
      input: "zeros_1/mul:z:0"
      input: "zeros_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Less"
      }
    }
    node_def {
      name: "zeros_1/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 30
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed/1"
      }
    }
    node_def {
      name: "zeros_1/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros_1/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/packed"
      }
    }
    node_def {
      name: "zeros_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1/Const"
      }
    }
    node_def {
      name: "zeros_1"
      op: "Fill"
      input: "zeros_1/packed:output:0"
      input: "zeros_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "zeros_1"
      }
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "zeros:output:0"
      input: "zeros_1:output:0"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003GPU\020\000\n\007\n\003CPU\020\0012\002J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_standard_lstm_22940"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
}
versions {
  producer: 175
  min_consumer: 12
}
